# .github/workflows/ci.yml
name: CI - Build, Test, Scan

on:
  push:
    branches:
      - main
      - 'feature/**' # Or any other branches you use
  pull_request:
    branches:
      - main

permissions:
  contents: read # Read repository content
  # No id-token needed here as we don't push to Azure yet
  # No packages: write needed here

jobs:
  # Placeholder for Linting Job (Optional)
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Node (for service1 linting)
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'
  #     - name: Lint Service 1
  #       run: |
  #         cd app/service1
  #         npm install
  #         npm run lint # Assuming you add a lint script to package.json
  #     # Add steps for Python linting (e.g., flake8) for service2

  # Placeholder for Testing Job (Optional)
  # test:
  #   runs-on: ubuntu-latest
  #   needs: [lint] # Example dependency
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Run Service 1 Tests
  #       run: |
  #         cd app/service1
  #         npm install
  #         npm test # Assuming you add a test script
  #     # Add steps for Python tests (e.g., pytest) for service2

  build-and-scan:
    runs-on: ubuntu-latest
    # needs: [test] # Make dependent on tests if they exist
    strategy:
      fail-fast: false # Allow other builds to continue if one fails
      matrix:
        service: [service1, service2] # Build services in parallel
        include:
          - service: service1
            docker_context: ./app/service1
            image_name: service1 # Image name in ACR (without registry prefix)
          - service: service2
            docker_context: ./app/service2
            image_name: service2

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Note: Login to ACR is NOT done here. It will be done in the CD workflow before pushing.

      - name: Build Docker image locally
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.docker_context }}
          file: ${{ matrix.docker_context }}/Dockerfile
          push: false # Do not push the image in CI
          tags: ${{ matrix.image_name }}:${{ github.sha }} # Tag locally for scanning
          load: true # Load image into docker daemon for scanning
          cache-from: type=gha # Enable GitHub Actions cache for build layers
          cache-to: type=gha,mode=max

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image_name }}:${{ github.sha }}'
          format: 'table'
          exit-code: '1' # Fail workflow if vulnerabilities found (adjust as needed)
          ignore-unfixed: true # Don't fail on vulnerabilities without known fixes
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH' # Scan for CRITICAL and HIGH severity vulnerabilities

      - name: Print Image Digest (for reference)
        run: |
          echo "Image digest: ${{ steps.docker_build.outputs.digest }}"