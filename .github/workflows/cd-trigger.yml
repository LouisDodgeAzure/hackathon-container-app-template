# .github/workflows/cd-trigger.yml
name: CD – Trigger Deployment

on:
  # Automatic deploy to dev on every push to main
  push:
    branches: [ main ]

  # Manual promotion (typically to prod)
  workflow_dispatch:
    inputs:
      environment:
        description: Target environment for manual promotion (usually prod)
        required: true
        type: environment
      commit_sha:
        description: Optional commit SHA to deploy (defaults to latest on default branch)
        required: false
        default: ''

# ────────────────────────────────────────────────────────────────────────────────
jobs:
  # 1️⃣ Work out where/what to deploy
  prepare:
    runs-on: ubuntu-latest
    outputs:
      target_env: ${{ steps.params.outputs.TARGET_ENV }}
      git_ref:    ${{ steps.params.outputs.GIT_REF }}

    steps:
      - name: Determine deployment parameters
        id: params
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "TARGET_ENV=dev"    >>"$GITHUB_OUTPUT"
            echo "GIT_REF=${{ github.ref }}" >>"$GITHUB_OUTPUT"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TARGET_ENV=${{ github.event.inputs.environment }}" >>"$GITHUB_OUTPUT"
            GIT_REF="${{ github.event.inputs.commit_sha }}"
            [[ -z "$GIT_REF" ]] && GIT_REF="${{ github.ref }}"
            echo "GIT_REF=$GIT_REF" >>"$GITHUB_OUTPUT"
          else
            echo "Unsupported event type ${{ github.event_name }}"; exit 1
          fi

  # 2️⃣ Call the reusable deployment workflow
  deploy:
    needs: prepare
    uses: ./.github/workflows/cd-deploy.yml     # local reusable workflow
    with:
      environment:          ${{ needs.prepare.outputs.target_env }}
      tf_vars_file:         ${{ vars.TF_VARS_FILE }}
      project_prefix:       ${{ vars.PROJECT_PREFIX }}
      resource_group_name:  ${{ vars.RESOURCE_GROUP_NAME }}
      run_canary:           ${{ vars.RUN_CANARY == 'true' }}
      git_ref:              ${{ needs.prepare.outputs.git_ref }}
    secrets: inherit                                # pass *all* secrets down
